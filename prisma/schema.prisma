// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id         String   @id @default(uuid())
  name       String
  cnpj       String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  users User[]

  @@map("tenants")
}

model User {
  id         String    @id @default(uuid())
  tenant_id  String
  name       String
  initials   String
  email      String    @unique
  color      String?
  password   String
  role_id    Int
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  role                Role                 @relation(fields: [role_id], references: [id])
  tenant              Tenant               @relation(fields: [tenant_id], references: [id])
  passwordResetTokens PasswordResetToken[]

  @@map("users")
}

model Associate {
  id              String    @id @default(uuid())
  name            String
  birthday        DateTime  @db.Date
  membership_date DateTime  @db.Date
  created_at      DateTime  @default(now())
  updated_at      DateTime? @updatedAt

  @@map("associates")
}

model Role {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  users       User[]
  permissions RolesHasPermissions[]

  @@map("roles")
}

model Permission {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  resource   String
  method     String
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  roles RolesHasPermissions[]

  @@map("permissions")
}

model RolesHasPermissions {
  permission_id Int
  role_id       Int

  permission Permission @relation(fields: [permission_id], references: [id])
  role       Role       @relation(fields: [role_id], references: [id])

  @@id([permission_id, role_id])
  @@map("roles_has_permissions")
}

model PasswordResetToken {
  id         String    @id @default(uuid())
  token      String    @unique
  user_id    String
  expires_at DateTime
  used_at    DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  user User @relation(fields: [user_id], references: [id])


  @@map("password_reset_tokens")
}
