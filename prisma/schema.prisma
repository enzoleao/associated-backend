// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id             String   @id @default(uuid())
  name           String
  identification String?  @unique
  logo_image     String?
  identity_color String?
  cnpj           String?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  users            User[]
  associates       Associate[]
  associatePlans   AssociatePlan[]
  associateAddress AssociateAddress[]

  @@map("tenants")
}

model User {
  id              String    @id @default(uuid())
  tenant_id       String
  name            String
  initials        String
  image_path      String?
  email           String
  color           String?
  cpf             String?
  rg              String?
  profession_name String?
  phone           String?
  birthday        DateTime? @db.Date
  password        String
  role_id         Int
  created_at      DateTime  @default(now())
  updated_at      DateTime? @updatedAt

  role                Role                 @relation(fields: [role_id], references: [id])
  tenant              Tenant               @relation(fields: [tenant_id], references: [id])
  passwordResetTokens PasswordResetToken[]

  associate Associate? @relation("UserAssociate")

  associates_created Associate[] @relation("AssociateCreator")
  associates_updated Associate[] @relation("AssociateUpdater")

  associates_address_created AssociateAddress[] @relation("AssociateAddressCreator")
  associates_address_updated AssociateAddress[] @relation("AssociateAddressUpdater")

  @@map("users")
}

model AssociateStatus {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  color      String
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  associates Associate[]

  @@map("associate_status")
}

model AssociatePlan {
  id         String    @id @default(uuid())
  tenant_id  String
  name       String    
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  tenant Tenant @relation(fields: [tenant_id], references: [id])

  associates Associate[]

  @@map("associate_plans")
}

model Associate {
  id                           String    @id @default(uuid())
  tenant_id                    String
  user_id                      String    @unique
  associate_status_id          Int
  associate_plan_id            String
  payment_method_preference_id String
  payment_due_date             String
  membership_date              DateTime? @db.Date
  creator_user_id              String
  updater_user_id              String?
  created_at                   DateTime  @default(now())
  updated_at                   DateTime? @updatedAt

  user                    User            @relation("UserAssociate", fields: [user_id], references: [id])
  tenant                  Tenant          @relation(fields: [tenant_id], references: [id])
  paymentPreferenceMethod PaymentMethod   @relation(fields: [payment_method_preference_id], references: [id])
  associateStatus         AssociateStatus @relation(fields: [associate_status_id], references: [id])
  associatePlan           AssociatePlan   @relation(fields: [associate_plan_id], references: [id])

  creator_user User  @relation("AssociateCreator", fields: [creator_user_id], references: [id])
  updater_user User? @relation("AssociateUpdater", fields: [updater_user_id], references: [id])

  AssociateAddress AssociateAddress[]

  dependent Dependent[]

  @@map("associates")
}

model Dependent {
  id                        String    @id @default(uuid())
  tenant_id                 String?
  associate_id              String
  dependent_relationship_id Int?
  name                      String?
  cpf                       String?
  birthday                  DateTime? @db.Date
  is_assured                Boolean   @default(false)
  created_at                DateTime  @default(now())
  updated_at                DateTime? @updatedAt

  associate              Associate              @relation(fields: [associate_id], references: [id])
  dependent_relationship DependentRelationship? @relation(fields: [dependent_relationship_id], references: [id])

  @@map("dependents")
}

model DependentRelationship {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  dependents Dependent[]

  @@map("dependent_relationships")
}

model PaymentMethod {
  id           String    @id @default(uuid())
  name         String    @unique
  payment_code String?
  created_at   DateTime  @default(now())
  updated_at   DateTime? @updatedAt

  associate Associate[]

  @@map("payment_methods")
}

model AssociateAddress {
  id               String    @id @default(uuid())
  tenant_id        String
  associate_id     String
  street           String
  neighborhood     String
  city             String
  number           String
  complement       String?
  zip_code         String
  country_state_id String
  creator_user_id  String
  updater_user_id  String?
  created_at       DateTime  @default(now())
  updated_at       DateTime? @updatedAt

  country_state CountryState @relation(fields: [country_state_id], references: [id])
  tenant        Tenant       @relation(fields: [tenant_id], references: [id])
  associate     Associate    @relation(fields: [associate_id], references: [id])

  creator_user User  @relation("AssociateAddressCreator", fields: [creator_user_id], references: [id])
  updater_user User? @relation("AssociateAddressUpdater", fields: [updater_user_id], references: [id])

  @@map("associate_address")
}

model CountryState {
  id         String    @id @default(uuid())
  name       String
  initials   String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  associate_address AssociateAddress[]

  @@map("country_states")
}

model Role {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  users       User[]
  permissions RolesHasPermissions[]

  @@map("roles")
}

model Resource {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  permissions Permission[]
  menus Menu[]

  @@map("resources")
}

model Permission {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  resource_id Int?       
  method      String
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt

  resource Resource? @relation(fields: [resource_id], references: [id])

  roles RolesHasPermissions[]

  @@map("permissions")
}

model RolesHasPermissions {
  permission_id Int
  role_id       Int

  permission Permission @relation(fields: [permission_id], references: [id])
  role       Role       @relation(fields: [role_id], references: [id])

  @@id([permission_id, role_id])
  @@map("roles_has_permissions")
}

model PasswordResetToken {
  id         String    @id @default(uuid())
  token      String    @unique
  user_id    String
  expires_at DateTime
  used_at    DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  user User @relation(fields: [user_id], references: [id])

  @@map("password_reset_tokens")
}

model Menu {
  id         Int       @id @default(autoincrement())
  name       String    
  path       String?   @unique
  resource_id Int?
  icon       String?
  order      Int       @default(0)
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  resource Resource? @relation(fields: [resource_id], references: [id])
  subMenus SubMenu[]

  @@map("menus")
}

model SubMenu {
  id         Int       @id @default(autoincrement())
  name       String
  path       String?  @unique
  menu_id    Int
  icon       String?
  order      Int       @default(0)
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  menu Menu @relation(fields: [menu_id], references: [id])

  @@map("sub_menus")
}